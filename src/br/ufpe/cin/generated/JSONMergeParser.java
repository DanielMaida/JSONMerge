/* Generated By:JavaCC: Do not edit this line. JSONMergeParser.java */
package br.ufpe.cin.generated;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;

public class JSONMergeParser extends AbstractFSTParser implements JSONMergeParserConstants {
        public JSONMergeParser(){}

  final public FSTInfo JSONRoot(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_OPENBRACE:
      n = Object(inTerminal);
                              replaceName(n);
                                                {if (true) return productionEndNonTerminal("JSONRoot1","-","-");}
      break;
    case O_OPENBRACKET:
      n = Array(inTerminal);
                             replaceName(n);
                                               {if (true) return productionEndNonTerminal("JSONRoot2","-","-");}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Object(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(O_OPENBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      n = Members(inTerminal);
                                    replaceName(n);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(O_CLOSEBRACE);
                                                           {if (true) return productionEndNonTerminal("Object","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Members(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Pair(inTerminal);
                            replaceName(n);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_COMMA:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      n = CommaPair(inTerminal);
                                                                       replaceName(n);
    }
                                                                                           {if (true) return productionEndNonTerminal("Members","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CommaPair(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(O_COMMA);
    n = Pair(inTerminal);
                                replaceName("Pair", n);
                                                          replaceName(n);
                                                                            {if (true) return productionEndNonTerminal("CommaPair","{Pair}","{Pair}");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Pair(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = String(inTerminal);
                              replaceName("String", n);
                                                          replaceName(n);
    jj_consume_token(O_COLON);
    n = Value(inTerminal);
                                                                                                    replaceName(n);
                                                                                                                      {if (true) return productionEndNonTerminal("Pair","{String}","{String}");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Array(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(O_OPENBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_OPENBRACE:
    case O_OPENBRACKET:
    case NUMBER:
    case STRING:
    case 27:
    case 28:
    case 29:
      n = Elements(inTerminal);
                                     replaceName(n);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(O_CLOSEBRACKET);
                                                            {if (true) return productionEndNonTerminal("Array","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Elements(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Value(inTerminal);
                             replaceName(n);
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      n = CommaValue(inTerminal);
                                                                                      replaceName(n);
    }
                                                                                                          {if (true) return productionEndNonTerminal("Elements","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CommaValue(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(O_COMMA);
    n = Value(inTerminal);
                                       replaceName(n);
                                                         {if (true) return productionEndNonTerminal("CommaValue","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Value(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      n = String(inTerminal);
                              replaceName(n);
                                                {if (true) return productionEndNonTerminal("Value1","{Name}","{Name}");}
      break;
    case NUMBER:
      n = Number(inTerminal);
                              replaceName(n);
                                                {if (true) return productionEndNonTerminal("Value2","{Name}","{Name}");}
      break;
    case O_OPENBRACE:
      n = Object(inTerminal);
                              replaceName(n);
                                                {if (true) return productionEndNonTerminal("Value3","{Name}","{Name}");}
      break;
    case O_OPENBRACKET:
      n = Array(inTerminal);
                             replaceName(n);
                                               {if (true) return productionEndNonTerminal("Value4","{Name}","{Name}");}
      break;
    case 27:
      jj_consume_token(27);
                 {if (true) return productionEndNonTerminal("Value5","{Name}","{Name}");}
      break;
    case 28:
      jj_consume_token(28);
                  {if (true) return productionEndNonTerminal("Value6","{Name}","{Name}");}
      break;
    case 29:
      jj_consume_token(29);
                 {if (true) return productionEndNonTerminal("Value7","{Name}","{Name}");}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Number(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    t = jj_consume_token(NUMBER);
                    replaceName(new FSTInfo("<NUMBER>",t.image));
                                                                    {if (true) return productionEndTerminal("Number","{<NUMBER>}","{<NUMBER>}","Replacement","LineBased",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo String(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    t = jj_consume_token(STRING);
                    replaceName(new FSTInfo("<STRING>",t.image));
                                                                    {if (true) return productionEndTerminal("String","{<STRING>}","{<STRING>}","Replacement","LineBased",first,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3R_11() {
    if (jj_scan_token(29)) return true;
    return false;
  }

  final private boolean jj_3R_3() {
    if (jj_scan_token(O_COMMA)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_scan_token(28)) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_scan_token(O_OPENBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(O_OPENBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  public JSONMergeParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x500,0x2000000,0x1000,0x3a100500,0x3a100500,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public JSONMergeParser(CharStream stream) {
    token_source = new JSONMergeParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JSONMergeParser(JSONMergeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(JSONMergeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[30];
    for (int i = 0; i < 30; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
